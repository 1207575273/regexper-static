grammar JavascriptRegexp
  root <- ( ( "/" regexp "/" flags:[igm]* ) / regexp flags:""? ) <Root>
  regexp <- match:match alternates:( "|" match )* <Regexp>
  match <- anchor_start:"^"?
           (!repeat) parts:match_fragment*
           anchor_end:"$"? <Match>
  match_fragment <- content:( subexp / charset / terminal ) repeat:repeat? <MatchFragment>
  repeat <- spec:( repeat_any / repeat_required / repeat_optional / repeat_spec ) greedy:"?"? <Repeat>
  repeat_any <- "*" <RepeatAny>
  repeat_required <- "+" <RepeatRequired>
  repeat_optional <- "?" <RepeatOptional>
  repeat_spec <- ( "{" min:[0-9]+ "," max:[0-9]+ "}"
                 / "{" min:[0-9]+ ",}"
                 / "{" exact:[0-9]+ "}" ) <RepeatSpec>
  subexp <- "(" capture:( subexp_no_capture / subexp_positive_lookahead / subexp_negative_lookahead )? regexp ")" <Subexp>
  subexp_no_capture <- "?:"
  subexp_positive_lookahead <- "?="
  subexp_negative_lookahead <- "?!"
  charset <- "[" invert:"^"? parts:( charset_range / charset_terminal )* "]" <Charset>
  charset_range <- first:charset_terminal "-" last:charset_terminal <CharsetRange>
  charset_terminal <- charset_escape <CharsetEscape>
                    / charset_literal <Literal>
  charset_escape <- "\\" esc:(
         code:[bdDfnrsStvwW] arg:""?
       / code:"c" arg:[a-zA-Z]
       / code:"0" arg:[0-7]+
       / code:"x" arg:( [0-9a-fA-F] [0-9a-fA-F] )
       / code:"u" arg:( [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] )
       / code:"0" arg:""? )
  charset_literal <- ( ""? literal:[^\\\]] ) / ( literal:"\\" &"c" ) / ( "\\" literal:. )
  terminal <- "." <AnyCharacter>
            / escape <Escape>
            / literal <Literal>
  escape <- "\\" esc:(
         code:[bBdDfnrsStvwW1-9] arg:""?
       / code:"c" arg:[a-zA-Z]
       / code:"0" arg:[0-7]+
       / code:"x" arg:( [0-9a-fA-F] [0-9a-fA-F] )
       / code:"u" arg:( [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] )
       / code:"0" arg:""? )
  literal <- ( ""? literal:[^|\\/.\[\(\)?+*$^] ) / ( literal:"\\" &"c" ) / ( "\\" literal:. )
